Step1 
  npm i @apollo/server graphql
  npm i cors express express-jwt jsonwebtoken

Step 2
----
in server.js file, have the following 

  import cors from "cors";
  import express from "express";

  const PORT = 9000;

  const app = express();
  app.use(cors(), express.json());

  app.listen({ port: PORT }, () => {
    console.log(`GrqphQL Server is running on port http://localhost:${PORT}/graphql`);
    console.log(
      `Authentication REST API is running on http://localhost:${PORT}/api/login`
    );
  });

Step 3: 
-------
  then, make the changes relevant to setting up Apollo Server 

  import { ApolloServer } from "@apollo/server";   <===

  import cors from "cors";
  import express from "express";
  // import { authMiddleware, handleLogin } from "./auth.js";

  const PORT = 9000;

  const app = express();
  app.use(cors(), express.json());

  // app.post("/login", handleLogin);
  const apolloServer = new ApolloServer({    <===
    typeDefs: '', 
    resolvers: ''
  });

  await apolloServer.start();  <===

  app.listen({ port: PORT }, () => {
    console.log(`GrqphQL Server is running on port http://localhost:${PORT}/graphql`);
    console.log(
      `Authentication REST API is running on http://localhost:${PORT}/api/login`
    );
  });


Step 4: 
========
  Let's setup express JS Middleware for ApolloServer 
  
  import { ApolloServer } from "@apollo/server";
  import { expressMiddleware } from "@apollo/server/express4";     <===
  import cors from "cors";
  import express from "express";
  // import { authMiddleware, handleLogin } from "./auth.js";

  const PORT = 9000;

  const app = express();
  app.use(cors(), express.json());

  // app.post("/login", handleLogin);
  const apolloServer = new ApolloServer({
    typeDefs: "",    <== needed in the next few steps 
    resolvers: "",   <== needed in the next few steps 
  });

  await apolloServer.start();
  app.use("/graphql", expressMiddleware(apolloServer));  <===

  app.listen({ port: PORT }, () => {
    console.log(`GrqphQL Server is running on port http://localhost:${PORT}/graphql`);
    console.log(
      `Authentication REST API is running on http://localhost:${PORT}/api/login`
    );
  });


Step 5: 
======
  Let's start the server 
  nodemon server.js 

  It will show error, let's setuop the schema 
  create schema.graphql file in the root level of the project with the following lines 

  type Query {
    hello: String
  }

Step 6:
------
  now it is time to use the schema.graphql file in our typeDefs

  import { readFile } from "fs/promises";  <==
  const typeDefs = await readFile('./schema.graphql', 'utf-8');   <== this one 

  const apolloServer = new ApolloServer({
    typeDefs: typeDefs,   <== this one 
    resolvers: "",
  });


Step 7:
====
  finally, Let's setuop the resolvers also. 
  create resolvers.js file with the following code 

  import { resolvers } from "./resolvers.js";

  ....
  ....
  ....

  const apolloServer = new ApolloServer({
    typeDefs: typeDefs,
    resolvers: resolvers,
  });


======= 
Step 8: 
----
  now start the Server 
  nodemon server.js 

====================================================

Next: Let's learn about documentation comments [DONE]
Next: Let's learn about connecting to some other rest api [DONE]
Next: Aliases in GraphQL [DONE]
Next: Let's handle error and customize it [DONE]
Next: Fragments in GraphQL 

=========
Next: Let's try Mutation [DONE]
Next: Let's learn about connecting to MongoDB  [DONE]
Next: Debugging [DONE]
Next: Caching [DONE] fetchPolicy
=====

Monday: 
-----
Next: Authentication 
Next: Handling Errors [DONE]
Next: React Project 

Tuesday 
-------
Next: Caching 
Next: Performance Tuning
Next: Chrome extensions + VS Extensions
Next: Pagination 

Wednesday
------
Next: Subscription 
Next: TypeScript Project Completion


Pagination
=======
  Types 

  1. Offset Pagination
      Disadv 
      ---
        after first set of result is loaded if new item is added in db, 
        offset will show previous displayed result also 


  2. Cursor Pagination
      Cursor pagination is a common technique to paginate data in GraphQL APIs.
      It involves using a "cursor" value to indicate the position in the dataset, which the client can pass to the server to fetch the next page of results.



====
GraphQL Subscriptions 
======
  You can't do this in standalone apollo server. you need expressjs based app
  
  npm install ws graphql-ws graphql-subscriptions

  In server side graphql app, do the following
  in server.js ,
    import { WebSocketServer } from 'ws';
    import { useServer } from 'graphql-ws/lib/use/ws';

    then, 
    before the following line 
      const server = new ApolloServer({ 
        ...
      })
    
    have the below code 
      const wsServer = new WebSocketServer({
        server: httpServer,
        path: "/graphql",   // this should match with the graphql api endpoint
      });

    
    then, inside new ApolloServer(....) logic, 
      modify the following to close websocket when apollo server is shut down 

    const server = new ApolloServer({
      typeDefs,
      resolvers,
      plugins: [ApolloServerPluginDrainHttpServer({ httpServer }), { <==
        async serverWillStart() {   <==
          return {                  <==
            async drainServer() {   <==
              await wsServerCleanup.dispose(); <==
            }
          }
        }
      }],
    });

  Now, the base setup is done. 
  Let's try working on Schema in typeDefs.js 
  
========








Here's an example of how to use Apollo Client in a React project to execute the `generateReport` mutation from your GraphQL schema:

1. **Set Up Your React Project**:

   If you haven't already, create a new React project or use an existing one. You can set up a new React project using Create React App:

   ```bash
   npx create-react-app graphql-apollo-client-example
   cd graphql-apollo-client-example
   ```

2. **Install Dependencies**:

   Install the necessary packages for Apollo Client and GraphQL:

   ```bash
   npm install @apollo/client graphql
   ```

3. **Set Up Apollo Client**:

   In your project, create a file for configuring Apollo Client, typically named `apollo.js`:

   ```javascript
   // apollo.js
   import { ApolloClient, InMemoryCache, HttpLink } from '@apollo/client';

   const client = new ApolloClient({
     link: new HttpLink({
       uri: 'YOUR_GRAPHQL_ENDPOINT_HERE', // Replace with your GraphQL server endpoint
     }),
     cache: new InMemoryCache(),
   });

   export default client;
   ```

   Replace `'YOUR_GRAPHQL_ENDPOINT_HERE'` with the actual URL of your GraphQL server.

4. **Create a Component for Mutation Execution**:

   Create a React component where you'll execute the mutation. For example, let's create a `GenerateReport` component:

   ```javascript
   // GenerateReport.js
   import React, { useState } from 'react';
   import { useMutation } from '@apollo/client';
   import GENERATE_REPORT_MUTATION from './generateReportMutation'; // Import your mutation

   function GenerateReport() {
     const [name, setName] = useState('');
     const [result, setResult] = useState('');

     const [generateReport] = useMutation(GENERATE_REPORT_MUTATION);

     const handleGenerateReport = async () => {
       try {
         const { data } = await generateReport({
           variables: {
             name,
           },
         });
         setResult(data.generateReport);
       } catch (error) {
         console.error('Error generating report:', error);
       }
     };

     return (
       <div>
         <h2>Generate Report</h2>
         <input
           type="text"
           placeholder="Report Name"
           value={name}
           onChange={(e) => setName(e.target.value)}
         />
         <button onClick={handleGenerateReport}>Generate Report</button>
         {result && <p>Result: {result}</p>}
       </div>
     );
   }

   export default GenerateReport;
   ```

   In this component, we use the `useMutation` hook from Apollo Client to execute the `GENERATE_REPORT_MUTATION`. Make sure to import your actual mutation definition.

5. **Create Your Mutation Definition**:

   Create a separate file for your mutation definition. For example, in a file named `generateReportMutation.js`:

   ```javascript
   // generateReportMutation.js
   import { gql } from '@apollo/client';

   const GENERATE_REPORT_MUTATION = gql`
     mutation GenerateReport($name: String) {
       generateReport(name: $name)
     }
   `;

   export default GENERATE_REPORT_MUTATION;
   ```

6. **Use the `GenerateReport` Component**:

   Finally, use the `GenerateReport` component in your main application file (e.g., `App.js`):

   ```javascript
   // App.js
   import React from 'react';
   import { ApolloProvider } from '@apollo/client';
   import client from './apollo'; // Import your Apollo Client configuration
   import GenerateReport from './GenerateReport'; // Import your GenerateReport component

   function App() {
     return (
       <ApolloProvider client={client}>
         <div className="App">
           <GenerateReport />
         </div>
       </ApolloProvider>
     );
   }

   export default App;
   ```

   This code wraps your application with `ApolloProvider` and includes the `GenerateReport` component for executing the mutation.

Now, when you run your React application (`npm start`), you can navigate to the `GenerateReport` component and use it to execute the `GENERATE_REPORT_MUTATION` to generate a report. Make sure to replace the GraphQL mutation and endpoint with your actual GraphQL schema and server details.
